{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$id": "https://example.com/product.schema.json",
    "title": "PostgreSQL Hacker Helper configuration",
    "description": "Configuration for PostgreSQL Hacker Helper VS Code extension",
    "type": "object",
    "definitions": {
        "array": {
            "type": "object",
            "required": [
                "typeName",
                "memberName",
                "lengthExpression"
            ],
            "properties": {
                "typeName": {
                    "type": "string",
                    "description": "Name of type value of variable. Must be valid C identifier without qualifiers like 'struct' or 'const'",
                    "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
                },
                "memberName": {
                    "type": "string",
                    "description": "Member name that contains array",
                    "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
                },
                "lengthExpression": {
                    "type": "string",
                    "description": "Expression to evaluate to get array length",
                    "minLength": 1
                }
            }
        },
        "aliases": {
            "type": "array",
            "description": "Aliases for Node types",
            "items": {
                "type": "object",
                "description": "Description of alias for specified Node types",
                "properties": {
                    "alias": {
                        "type": "string",
                        "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
                        "description": "Name of alias"
                    },
                    "type": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Real type"
                    }
                },
                "required": [
                    "alias",
                    "type"
                ]
            }
        },
        "typedefs": {
            "oneOf": [
                {
                    "type": "string",
                    "description": "Path to custom typedefs.list file which will be added to default"
                },
                {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of paths to custom typedefs.list files which will be added to default"
                }
            ],
            "description": "Path to or array of paths to custom typedefs.list files which will be added to default"
        },
        "customListType": {
            "type": "object",
            "description": "Description of custom pointer type for specified List",
            "properties": {
                "type": {
                    "type": "string",
                    "pattern": "\\*$",
                    "description": "Type to which 'ListCell's will be casted. Must be pointer."
                },
                "parent": {
                    "type": "string",
                    "description": "Name of struct or function which this 'List *' belongs to. If this is a member then name of structure, otherwise if this is variable in function, then enter function name."
                },
                "member": {
                    "type": "string",
                    "description": "Name of member of variable which contains this 'List *'."
                }
            },
            "required": [
                "type", "parent", "member"
            ]
        },
        "htab": {
            "type": "object",
            "description": "Description of types of entries in HTAB",
            "properties": {
                "type": {
                    "type": "string",
                    "pattern": "\\*$",
                    "description": "Type of entry in Hash Table to which entry will be casted. Must be pointer."
                },
                "parent": {
                    "type": "string",
                    "description": "Name of struct or function which this 'HTAB *' belongs to. If this is a member then name of structure, otherwise if this is variable in function, then enter function name."
                },
                "member": {
                    "type": "string",
                    "description": "Name of member of variable which contains this 'HTAB *'"
                }
            },
            "required": [
                "type", "parent", "member"
            ]
        },
        "simplehash": {
            "type": "object",
            "description": "Description of types of entries in simplehash",
            "properties": {
                "prefix": {
                    "type": "string",
                    "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
                    "description": "Prefix for simplehash operations/structures specified in SH_PREFIX"
                },
                "type": {
                    "type": "string",
                    "pattern": "\\*$",
                    "description": "Type of entry in Hash Table. Must be pointer."
                }
            },
            "required": [
                "prefix",
                "type"
            ]
        },
        "enumBitmask": {
            "type": "object",
            "description": "Enum/bitmask stored as integer type with values defined by macros",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Name of parent type to which member belongs"
                },
                "member": {
                    "type": "string",
                    "description": "Name of member in parent type which holds this bitmask member"
                },
                "flags": {
                    "type": "array",
                    "description": "Flags defined for this bitmask member: first - is macro name of enum, second - numeric value assigned to enum",
                    "items": {
                        "type": "array",
                        "minItems": 2,
                        "maxItems": 2,
                        "description": "Pair of macro enum name and value of it's enum in case macros are not available",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "fields": {
                    "type": "array",
                    "description": "Array of bit fields used in specified member",
                    "items": {
                        "type": "object",
                        "description": "Description of a single field inside integer member",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Rendered name of field"
                            },
                            "mask": {
                                "type": "string",
                                "description": "Macro used as mask to get value of this field"
                            },
                            "numeric": {
                                "type": "string",
                                "description": "Numeric value of mask to use when macro are not available in debugger"
                            }
                        }
                    }
                }
            },
            "required": ["type", "member"]
        },
        "nodetag": {
            "type": "string",
            "description": "NodeTag value. Prefix 'T_' is ignored."
        }
    },
    "properties": {
        "arrays": {
            "type": "array",
            "description": "Special members that represent arrays - separate fields for array and it's length",
            "items": {
                "$ref": "#/definitions/array"
            }
        },
        "aliases": {
            "$ref": "#/definitions/aliases"
        },
        "typedefs": {
            "$ref": "#/definitions/typedefs"
        },
        "customListTypes": {
            "type": "array",
            "description": "Array of definitions of custom List types",
            "items": {
                "$ref": "#/definitions/customListType"
            }
        },
        "htab": {
            "type": "array",
            "description": "Array of definitions of types of entries in HTAB",
            "items": {
                "$ref": "#/definitions/htab"
            }
        },
        "simplehash": {
            "type": "array",
            "description": "Array of definitions of types in simple hash tables",
            "items": {
                "$ref": "#/definitions/simplehash"
            }
        },
        "enums": {
            "type": "array",
            "description": "Array of definitions of enum types defined as integers and with MACROs used to access them",
            "items": {
                "$ref": "#/definitions/enumBitmask"
            }
        },
        "nodetags": {
            "type": "array",
            "description": "Array of custom NodeTag values. Can be added manually, or extension can find them during debugger start.",
            "items": {
                "$ref": "#/definitions/nodetag"
            }
        }
    }
}